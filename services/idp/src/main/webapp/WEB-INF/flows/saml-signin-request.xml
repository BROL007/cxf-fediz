<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements. See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership. The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License. You may obtain a copy of the License at
 
  http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied. See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <input name="idpConfig" />
    <input name="SAMLRequest" />
    <input name="RelayState" />
    <input name="Signature" />
    <input name="protocol" />
    
    <action-state id="parseAuthnRequest">
        <evaluate expression="authnRequestParser.parseSAMLRequest(flowRequestContext, flowScope.idpConfig,
                                                              flowScope.SAMLRequest, flowScope.Signature,
                                                              flowScope.RelayState)" />
        <transition to="processHRDSExpression"/>
        <transition on-exception="org.apache.cxf.fediz.core.exception.ProcessingException" to="viewBadRequest" />
    </action-state>

    <decision-state id="processHRDSExpression">
        <on-entry>
            <evaluate expression="processHRDSExpressionAction.submit(flowRequestContext, null)" 
                      result="flowScope.home_realm" />
        </on-entry>
        <if test="flowScope.home_realm == null or flowScope.home_realm.trim().isEmpty()"
            then="provideIDPListForUser" else="checkIsThisIDP" />
    </decision-state>
    
    <decision-state id="provideIDPListForUser">
        <if test="flowScope.idpConfig.trustedIdps == null or idpConfig.trustedIdps.isEmpty()"
            then="checkDefaultToThisIDP" />
        <if test="flowScope.idpConfig.isProvideIdpList() == false"
            then="checkDefaultToThisIDP" else="showIDPList" />
    </decision-state>
    
    <decision-state id="checkDefaultToThisIDP">
        <if test="flowScope.idpConfig.isUseCurrentIdp()" then="homeRealmSignInEntryPoint"
            else="viewBadRequest" />
    </decision-state>
    
    <view-state id="showIDPList" view="idplist" model="trustedIDPSelection">
        <var name="trustedIDPSelection"
            class="org.apache.cxf.fediz.service.idp.model.TrustedIDPSelection" />
        <binder>
            <binding property="whr" required="true" />
        </binder>
        <on-entry>
            <set name="requestScope.idPConfig" value="flowScope.idpConfig" />
        </on-entry>
        <transition on="submit" to="checkIsThisIDP" bind="true"
            validate="true">
            <set name="flowScope.home_realm" value="trustedIDPSelection.whr" />
            <evaluate
                expression="homeRealmReminder.addCookie(flowRequestContext, flowScope.home_realm)" />
        </transition>
        <transition on="cancel" to="checkDefaultToThisIDP"
            bind="false" validate="false" />
    </view-state>
    
    <!-- Home Realm is known then we can store it in cookie -->
    <decision-state id="checkIsThisIDP">
        <if test="flowScope.idpConfig.realm.equals(flowScope.home_realm)"
            then="homeRealmSignInEntryPoint" else="checkIdpTokenWhrWauth" />
    </decision-state>
    
    <!-- ============================================================================================================= -->
    
    <!-- Is 'wresult/RP-IDP token' already received and validated (then stored 
        in session) from requestor IDP ? -->
    <decision-state id="checkIdpTokenWhrWauth">
        <if test="externalContext.sessionMap[flowScope.home_realm] != null"
            then="wfreshParserRemoteAction" else="redirectToTrustedIDP" />
    </decision-state>
    
    <action-state id="wfreshParserRemoteAction">
        <evaluate
            expression="idpTokenExpiredAction.isTokenExpired(flowScope.home_realm, flowRequestContext)" />
        <transition on="yes" to="redirectToTrustedIDP" />
        <transition on="no" to="validateWReply" >
            <set name="flowScope.idpToken" value="externalContext.sessionMap[flowScope.home_realm]" />
        </transition>
        <transition on-exception="java.lang.Throwable" to="viewBadRequest" />
    </action-state>
    
    <action-state id="validateWReply">
        <evaluate expression="commonsURLValidator.isValid(flowRequestContext, flowScope.wreply)
                              and passiveRequestorValidator.isValid(flowRequestContext, flowScope.consumerURL, flowScope.realm)"/>
        <transition on="yes" to="requestRpToken" />
        <transition on="no" to="viewBadRequest" />
    </action-state>
    
    <!-- ============================================================================================================= -->
    
    <decision-state id="homeRealmSignInEntryPoint">
        <on-entry>
            <!-- Here, home realm is guaranteed to be THIS realm -->
            <set name="flowScope.home_realm" value="flowScope.idpConfig.realm" />
        </on-entry>
        <if test="flowScope.idpConfig.getAuthenticationURIs() == null"
            then="scInternalServerError" />
        <!-- check presence of cached IDP token for THIS realm -->
        <if test="externalContext.sessionMap[flowScope.home_realm] == null"
            then="cacheSecurityToken" else="checkTokenExpiry" />
    </decision-state>

    <action-state id="checkTokenExpiry">
        <evaluate
            expression="idpTokenExpiredAction.isTokenExpired(flowScope.home_realm, flowRequestContext)
                        or authnRequestParser.isForceAuthentication(flowRequestContext)" />
        <transition on="yes" to="redirectToLocalIDP" />
        <transition on="no" to="validateEndpointAddress">
            <set name="flowScope.idpToken" value="externalContext.sessionMap[flowScope.home_realm]" />
        </transition>
        <transition on-exception="java.lang.Throwable" to="scInternalServerError" />
    </action-state>

    <end-state id="redirectToLocalIDP">
        <on-entry>
            <evaluate expression="logoutAction.submit(flowRequestContext)" />
        </on-entry>
        <output name="home_realm" value="flowScope.home_realm" />
    </end-state>

    <action-state id="cacheSecurityToken">
        <secured attributes="IS_AUTHENTICATED_FULLY" />
        <evaluate expression="cacheSecurityToken.submit(flowRequestContext)" />
        <transition to="validateEndpointAddress">
            <set name="flowScope.idpToken" value="externalContext.sessionMap[flowScope.home_realm]" />
        </transition>
    </action-state>
    
    <action-state id="validateEndpointAddress">
        <on-entry>
            <evaluate expression="authnRequestParser.retrieveConsumerURL(flowRequestContext)" 
                      result="flowScope.consumerURL"/>
            <evaluate expression="authnRequestParser.retrieveRealm(flowRequestContext)" 
                          result="flowScope.realm"/>
        </on-entry>
        <evaluate expression="passiveRequestorValidator.isValid(flowRequestContext, flowScope.consumerURL, flowScope.realm)"/>
        <transition on="yes" to="requestRpToken" />
        <transition on="no" to="viewBadRequest" />
    </action-state>

    <!-- ============================================================================================================= -->

    <!-- normal exit point -->
    <end-state id="requestRpToken">
        <output name="home_realm" value="flowScope.home_realm" />
        <output name="idpToken" value="flowScope.idpToken" />
        <output name="saml_authn_request" value="flowScope.saml_authn_request" />
    </end-state>

    <!-- abnormal exit point -->
    <end-state id="viewBadRequest">
        <output name="saml_authn_request" value="flowScope.saml_authn_request" />
    </end-state>
    
    <!-- abnormal exit point -->
    <end-state id="scInternalServerError" />
    
    <!-- redirects to requestor idp -->
    <end-state id="redirectToTrustedIDP">
        <on-entry>
            <evaluate expression="signinParametersCacheAction.store(flowRequestContext, protocol)" />
        </on-entry>
        <output name="home_realm" value="flowScope.home_realm" />
        <output name="trusted_idp_context" value="flowScope.trusted_idp_context" />
    </end-state>

</flow>
