<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <on-start>
        <evaluate expression="initialFlowSetupAction.submit(flowRequestContext)" />
    </on-start>
    
    <!-- protocol check -->
    <decision-state id="WSFederationRequestCheck">
        <on-entry>
            <set name="externalContext.sessionMap['wtrealm']" value="requestParameters.wtrealm" />
            <set name="externalContext.sessionMap['wreply']" value="requestParameters.wreply" />
            <set name="externalContext.sessionMap['wctx']" value="requestParameters.wctx" />
            <set name="externalContext.sessionMap['wfresh']" value="requestParameters.wfresh" />
            <set name="externalContext.sessionMap['wauth']" value="requestParameters.wauth" />
        </on-entry>
        <if test="requestParameters.wa == null" then="viewBadRequest" />
        <if test="requestParameters.wa != 'wsignin1.0' and requestParameters.wa != 'wsignout1.0' and requestParameters.wa != 'wsignoutcleanup1.0'" then="viewBadRequest" />
        <if test="requestParameters.wa == 'wsignout1.0' or requestParameters.wa == 'wsignoutcleanup1.0'" then="invalidateSessionAction" />
        <if test="requestParameters.wtrealm == null or requestParameters.wtrealm.length() == 0" then="viewBadRequest" />

<!--    check if IDP token is expired -->
        <if test="externalContext.sessionMap['IDP_TOKEN'].isExpired() == true" then="invalidateSessionAction" />
<!--    check if IDP token is still valid but relying party requested new authentication -->
        <if test="requestParameters.wfresh != null and requestParameters.wfresh.equals('0')" then="invalidateSessionAction" />
<!--    check if IDP token is still valid but relying party requested new authentication via wfresh -->
        <if test="requestParameters.wfresh != null" then="wfreshParserAction" else="rpTokenAction" />
    </decision-state>
    
    <!-- parse wfresh parameter, provided by resource RP, overriding ttl from 'IDP_TOKEN' -->
    <action-state id="wfreshParserAction">
        <evaluate expression="wfreshParser.authenticationRequired(requestParameters.wfresh, flowRequestContext)" />
        <transition on="yes" to="invalidateSessionAction"/>
        <transition on="no" to="rpTokenAction"/>
<!--         <transition on-exception="java.lang.Throwable" to="scInternalServerError" /> -->
<!--     wfresh invalid, ignore exception, force authentication -->
        <transition on-exception="java.lang.Throwable" to="invalidateSessionAction" />
    </action-state>

    <!-- produce RP security token (as String type) -->
    <action-state id="rpTokenAction">
        <evaluate expression="stsClientForRpAction.submit(externalContext.sessionMap['wtrealm'], flowRequestContext)" 
                    result="flowScope.rpToken" 
                    result-type="java.lang.String" />
        <transition to="formResponseView" />
        <transition on-exception="java.lang.Throwable" to="scInternalServerError" />
    </action-state>

    <!-- normal exit point for login -->
    <!-- browser redirection (self-submitted form 'signinresponseform.jsp') -->
    <end-state id="formResponseView" view="signinresponseform"> 
        <on-entry>
            <evaluate expression="externalContext.sessionMap['wreply']" result="requestScope.fedAction" />
            <evaluate expression="externalContext.sessionMap['wtrealm']" result="requestScope.fedWTrealm" />
            <evaluate expression="externalContext.sessionMap['wctx']" result="requestScope.fedWCtx" />
            <evaluate expression="flowScope.rpToken" result="requestScope.fedWResult" />
        </on-entry>
    </end-state>
    
    <!-- abnormal exit point : Http 400 Bad Request -->
    <end-state id="viewBadRequest" view="genericerror">
        <on-entry>
            <evaluate expression="externalContext.nativeResponse.setStatus(400,flowRequestContext.currentTransition.toString())" />
            <set name="requestScope.reason" value="flowRequestContext.currentTransition" />
        </on-entry>
    </end-state>

    <!-- abnormal exit point : Http 500 Internal Server Error -->
    <end-state id="scInternalServerError" view="genericerror">
        <on-entry>
            <evaluate expression="externalContext.nativeResponse.setStatus(500,'IDP is unavailable, please contact the administrator')" />
            <set name="requestScope.reason" value="'IDP is unavailable, please contact the administrator'" />
        </on-entry>
    </end-state>

    <!-- invalidate IDP session -->
    <action-state id="invalidateSessionAction">
        <evaluate expression="logoutAction.submit(flowRequestContext)" />
        <transition on="success" to="endLogout" />
        <transition on-exception="java.lang.Throwable" to="scInternalServerError" />
    </action-state>

    <!-- normal exit point for logout -->
    <end-state id="endLogout" view="signoutresponse" /> 
    
</flow>
